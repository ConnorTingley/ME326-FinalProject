// Generated by gencpp from file me326_locobot_example/PixtoPointResponse.msg
// DO NOT EDIT!


#ifndef ME326_LOCOBOT_EXAMPLE_MESSAGE_PIXTOPOINTRESPONSE_H
#define ME326_LOCOBOT_EXAMPLE_MESSAGE_PIXTOPOINTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace me326_locobot_example
{
template <class ContainerAllocator>
struct PixtoPointResponse_
{
  typedef PixtoPointResponse_<ContainerAllocator> Type;

  PixtoPointResponse_()
    : ptCld_point()  {
    }
  PixtoPointResponse_(const ContainerAllocator& _alloc)
    : ptCld_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _ptCld_point_type;
  _ptCld_point_type ptCld_point;





  typedef boost::shared_ptr< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PixtoPointResponse_

typedef ::me326_locobot_example::PixtoPointResponse_<std::allocator<void> > PixtoPointResponse;

typedef boost::shared_ptr< ::me326_locobot_example::PixtoPointResponse > PixtoPointResponsePtr;
typedef boost::shared_ptr< ::me326_locobot_example::PixtoPointResponse const> PixtoPointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator1> & lhs, const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ptCld_point == rhs.ptCld_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator1> & lhs, const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace me326_locobot_example

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "453b790c7c72ce0c0a5e253a59f6dc48";
  }

  static const char* value(const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x453b790c7c72ce0cULL;
  static const uint64_t static_value2 = 0x0a5e253a59f6dc48ULL;
};

template<class ContainerAllocator>
struct DataType< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "me326_locobot_example/PixtoPointResponse";
  }

  static const char* value(const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PointStamped ptCld_point\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ptCld_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixtoPointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::me326_locobot_example::PixtoPointResponse_<ContainerAllocator>& v)
  {
    s << indent << "ptCld_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.ptCld_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ME326_LOCOBOT_EXAMPLE_MESSAGE_PIXTOPOINTRESPONSE_H
